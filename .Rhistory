construction_valid <- construction[-inTrain,]
control1 <- glm.control1(maxit = 100) # Need to increase the maximum number of model iterations so that brglm can run successfully
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Bid_Price__Millions_ + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Winning_Bid_Price__Millions_ + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1)
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Bid_Price__Millions_ + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Winning_Bid_Price__Millions_ + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1)
summary(construction_ref)
control1 <- glm.control1(maxit = 1000) # Need to increase the maximum number of model iterations so that brglm can run successfully
hist(construction$Competitor_C, labels = TRUE) # Bid on 5.6% of total projects
hist(construction$Competitor_D, labels = TRUE) # Bid on 10.6% of total projects
control1 <- glm.control(maxit = 1000) # Need to increase the maximum number of model iterations so that brglm can run successfully
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Bid_Price__Millions_ + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Winning_Bid_Price__Millions_ + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1)
summary(construction_ref)
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Bid_Win_Difference + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1) # This new model with Bid_Win_Difference eliminates all multicollinearity present in the model
summary(construction_ref)
vif(construction_ref) # No more multicollinearity present
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Bid_Price__Millions_ + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Winning_Bid_Price__Millions_ + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1)
control1 <- glm.control1(maxit = 100) # Need to increase the maximum number of model iterations so that brglm can run successfully
construction_ref <- brglm2(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Bid_Price__Millions_ + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Winning_Bid_Price__Millions_ + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1)
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Bid_Price__Millions_ + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Winning_Bid_Price__Millions_ + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1)
warnings()
control1 <- glm.control1(maxit = 10000) # Need to increase the maximum number of model iterations so that brglm can run successfully
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Bid_Price__Millions_ + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Winning_Bid_Price__Millions_ + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1)
#install.packages(c('expsmooth','lmtest','zoo','seasonal','haven','fma','gmodels','car','tseries','descr','forecast','brglm2','moments'))
library(car)
library(gmodels)
library(forecast)
library(haven)
library(fma)
library(descr)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(brglm)
library(brglm2)
library(moments)
library(caret)
options(scipen=999) # Improve readability of parameter estimates
file.dir <- '/Users/matttrombley/Dropbox/Fall 2018/Fall 1/Logistic Regression/Final Project/' # Replace with path to your file
input.file1 <- "construction.sas7bdat"
construction <- read_sas(paste(file.dir, input.file1,sep = "")) # Read in training set
construction$Bid_Win_Difference <- round(construction$Bid_Price__Millions_ - construction$Winning_Bid_Price__Millions_,2) # Creating this variable is one way to resolve all multicollinearity
construction$Won <- ifelse(construction$Win_Bid == "Yes",1,0)
construction$Sector <- as.factor(construction$Sector) # Change Sector to categorical variable
construction <- subset(construction, select = -Win_Bid)
summary(construction) # Summarize to check for missing values and descriptive statistics
##creating partitions randomly
set.seed(1452)
inTrain <- createDataPartition(y=construction$Won, p=0.70, list=FALSE)
construction_train <- construction[inTrain,]
construction_valid <- construction[-inTrain,]
View(construction_train)
View(inTrain)
control1 <- glm.control1(maxit = 100) # Need to increase the maximum number of model iterations so that brglm can run successfully
View(control1)
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Bid_Price__Millions_ + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Winning_Bid_Price__Millions_ + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1)
summary(construction_ref)
vif(construction_ref) # High VIF values for Estimated_Cost_Millions, Bid_Price_Millions, and Winning_Bid_Price_Millions
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Bid_Win_Difference + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1) # This new model with Bid_Win_Difference eliminates all multicollinearity present in the model
summary(construction_ref)
vif(construction_ref) # No more multicollinearity present
hist(construction$sector, labels = TRUE)
hist(construction$sector, labels = TRUE)
summary(construction_ref)
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Bid_Win_Difference + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1) # This new model with Bid_Win_Difference eliminates all multicollinearity present in the model
summary(construction_ref)
vif(construction_ref) # No more multicollinearity present
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Bid_Win_Difference, data = construction_train, family = binomial(link = "logit"), control.glm = control1) # This new model with Bid_Win_Difference eliminates all multicollinearity present in the model
summary(construction_ref)
vif(construction_ref) # No more multicollinearity present
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_C + Competitor_D + Competitor_E + Competitor_F + Competitor_G + Competitor_H + Competitor_I + Competitor_J + Bid_Win_Difference + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1) # This new model with Bid_Win_Difference eliminates all multicollinearity present in the model
summary(construction_ref)
vif(construction_ref) # No more multicollinearity present
for (i in c(1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19)) {
if (skewness(construction[,i]) > 2) {
print(skewness(construction[,i]))
}
} # Competitors, C, D, and G all have high values here
for (i in c(1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19)) {
if (kurtosis(construction[,i]) > 5) {
print(kurtosis(construction[,i]))
}
} # Five variables of interest - Competitors C, D, and G, Cost After Eng. Estimate, and Bid Win Diff
hist(construction$Competitor_G, labels = TRUE) # Bid on 5.6% of total projects
for (i in c(1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19)) {
if (skewness(construction[,i]) > 2) {
print(skewness(construction[,i]))
}
} # Competitors, C, D, and G all have high values here
for (i in c(1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19)) {
if (kurtosis(construction[,i]) > 5) {
print(kurtosis(construction[,i]))
}
} # Five variables of interest - Competitors C, D, and G, Cost After Eng. Estimate, and Bid Win Diff
file.dir <- '/Users/matttrombley/Dropbox/Fall 2018/Fall 1/Logistic Regression/Final Project/' # Replace with path to your file
input.file1 <- "construction.sas7bdat"
construction <- read_sas(paste(file.dir, input.file1,sep = "")) # Read in training set
construction$Bid_Win_Difference <- round(construction$Bid_Price__Millions_ - construction$Winning_Bid_Price__Millions_,2) # Creating this variable is one way to resolve all multicollinearity
construction$Won <- ifelse(construction$Win_Bid == "Yes",1,0)
construction$Sector <- as.factor(construction$Sector) # Change Sector to categorical variable
construction <- subset(construction, select = -c(Win_Bid,Competitor_C,Competitor_D,Competitor_G))
summary(construction) # Summarize to check for missing values and descriptive statistics
##creating partitions randomly
set.seed(1452)
inTrain <- createDataPartition(y=construction$Won, p=0.70, list=FALSE)
construction_train <- construction[inTrain,]
construction_valid <- construction[-inTrain,]
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Bid_Price__Millions_ + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_E + Competitor_F + Competitor_H + Competitor_I + Competitor_J + Winning_Bid_Price__Millions_ + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1)
summary(construction_ref)
vif(construction_ref) # High VIF values for Estimated_Cost_Millions, Bid_Price_Millions, and Winning_Bid_Price_Millions
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_E + Competitor_F + Competitor_H + Competitor_I + Competitor_J + Bid_Win_Difference + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1) # This new model with Bid_Win_Difference eliminates all multicollinearity present in the model
summary(construction_ref)
vif(construction_ref) # No more multicollinearity present
for (i in c(1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19)) {
if (skewness(construction[,i]) > 2) {
print(skewness(construction[,i]))
}
} # Competitors, C, D, and G all have high values here
#install.packages(c('expsmooth','lmtest','zoo','seasonal','haven','fma','gmodels','car','tseries','descr','forecast','brglm2','moments'))
library(car)
library(gmodels)
library(forecast)
library(haven)
library(fma)
library(descr)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(brglm)
library(brglm2)
library(moments)
library(caret)
options(scipen=999) # Improve readability of parameter estimates
set.seed(1452) # Set seed to replicate results
file.dir <- '/Users/matttrombley/Dropbox/Fall 2018/Fall 1/Logistic Regression/Final Project/' # Replace with path to your file
input.file1 <- "construction.sas7bdat"
construction <- read_sas(paste(file.dir, input.file1,sep = "")) # Read in training set
construction$Bid_Win_Difference <- round(construction$Bid_Price__Millions_ - construction$Winning_Bid_Price__Millions_,2) # Creating this variable is one way to resolve all multicollinearity
construction$Won <- ifelse(construction$Win_Bid == "Yes",1,0)
construction$Sector <- as.factor(construction$Sector) # Change Sector to categorical variable
construction <- subset(construction, select = -c(Win_Bid,Competitor_C,Competitor_D,Competitor_G))
summary(construction) # Summarize to check for missing values and descriptive statistics
inTrain <- createDataPartition(y=construction$Won, p=0.70, list=FALSE) # Creating partitions randomly
construction_train <- construction[inTrain,]
construction_valid <- construction[-inTrain,]
control1 <- glm.control1(maxit = 100) # Need to increase the maximum number of model iterations so that brglm can run successfully
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Sector + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_E + Competitor_F + Competitor_H + Competitor_I + Competitor_J + Bid_Win_Difference + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1) # This new model with Bid_Win_Difference eliminates all multicollinearity present in the model
summary(construction_ref)
vif(construction_ref) # No more multicollinearity present
cor(construction_train)
View(construction_train)
for (i in c(1,2,3,6,7,8,9,10,11,12,13,14,15,16)) {
if (skewness(construction[,i]) > 2) {
print(skewness(construction[,i]))
}
} # Competitors, C, D, and G all have high values here
for (i in c(1,2,3,6,7,8,9,10,11,12,13,14,15,16)) {
if (kurtosis(construction[,i]) > 5) {
print(kurtosis(construction[,i]))
}
} # Five variables of interest - Competitors C, D, and G, Cost After Eng. Estimate, and Bid Win Diff
##possible outliers...need to recheck in the model
boxplot(construction_train$Estimated_Years_to_Complete)
construction_train$Estimated_Years_to_Complete2[construction_train$Estimated_Years_to_Complete>15]
hist(construction$Competitor_A) # Replace variable as needed to generate histograms
vif(construction_ref) # No more multicollinearity present
construction$test1 <- ifelse(construction$Sector == "1",1,0)
construction$test2 <- ifelse(construction$Sector == "2",1,0)
construction$test3 <- ifelse(construction$Sector == "3",1,0)
construction$test4 <- ifelse(construction$Sector == "4",1,0)
construction$test5 <- ifelse(construction$Sector == "5",1,0)
construction$test6 <- ifelse(construction$Sector == "6",1,0)
construction$test7 <- ifelse(construction$Sector == "7",1,0)
construction$test8 <- ifelse(construction$Sector == "8",1,0)
construction$test9 <- ifelse(construction$Sector == "9",1,0)
construction$test10 <- ifelse(construction$Sector == "10",1,0)
View(construction)
construction <- subset(construction, select = -c(Win_Bid,Competitor_C,Competitor_D,Competitor_G,Sector))
summary(construction) # Summarize to check for missing values and descriptive statistics
inTrain <- createDataPartition(y=construction$Won, p=0.70, list=FALSE) # Creating partitions randomly
construction_train <- construction[inTrain,]
construction_valid <- construction[-inTrain,]
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_E + Competitor_F + Competitor_H + Competitor_I + Competitor_J + Bid_Win_Difference + Cost_After_Engineering_Estimate_ + test1+ test2+ test3+ test4+ test5+ test6+ test7+ test8+ test9+ test10, data = construction_train, family = binomial(link = "logit"), control.glm = control1) # This new model with Bid_Win_Difference eliminates all multicollinearity present in the model
summary(construction_ref)
vif(construction_ref) # No more multicollinearity present
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_E + Competitor_F + Competitor_H + Competitor_I + Competitor_J + Bid_Win_Difference + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1) # This new model with Bid_Win_Difference eliminates all multicollinearity present in the model
summary(construction_ref)
vif(construction_ref) # No more multicollinearity present
for (i in c(1,2,3,6,7,8,9,10,11,12,13,14,15,16)) {
if (skewness(construction[,i]) > 2) {
print(skewness(construction[,i]))
}
} # Competitors, C, D, and G all have high values here
for (i in c(1,2,3,6,7,8,9,10,11,12,13,14,15,16)) {
if (kurtosis(construction[,i]) > 5) {
print(kurtosis(construction[,i]))
}
} # Five variables of interest - Competitors C, D, and G, Cost After Eng. Estimate, and Bid Win Diff
library(car)
library(gmodels)
library(forecast)
library(haven)
library(fma)
library(descr)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(brglm)
library(brglm2)
library(moments)
library(caret)
options(scipen=999) # Improve readability of parameter estimates
set.seed(1452) # Set seed to replicate results
file.dir <- '/Users/matttrombley/Dropbox/Fall 2018/Fall 1/Logistic Regression/Final Project/' # Replace with path to your file
input.file1 <- "construction.sas7bdat"
construction <- read_sas(paste(file.dir, input.file1,sep = "")) # Read in training set
construction$Bid_Win_Difference <- round(construction$Bid_Price__Millions_ - construction$Winning_Bid_Price__Millions_,2) # Creating this variable is one way to resolve all multicollinearity
construction$Won <- ifelse(construction$Win_Bid == "Yes",1,0)
construction$Sector <- as.factor(construction$Sector) # Change Sector to categorical variable
construction <- subset(construction, select = -c(Win_Bid,Competitor_C,Competitor_D,Competitor_G))
summary(construction) # Summarize to check for missing values and descriptive statistics
inTrain <- createDataPartition(y=construction$Won, p=0.70, list=FALSE) # Creating partitions randomly
construction_train <- construction[inTrain,]
construction_valid <- construction[-inTrain,]
control1 <- glm.control1(maxit = 100) # Need to increase the maximum number of model iterations so that brglm can run successfully
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_E + Competitor_F + Competitor_H + Competitor_I + Competitor_J + Bid_Win_Difference + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1) # This new model with Bid_Win_Difference eliminates all multicollinearity present in the model
summary(construction_ref)
vif(construction_ref) # No more multicollinearity present
hist(construction$Bid_Price__Millions_) # Replace variable as needed to generate histograms
library(forecast)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(readxl)
df_monthly_index <- read_excel("Desktop/df_monthly_index.csv")
View(df_monthly_index)
df_monthly_index <- read.csv("~/Desktop/df_monthly_index.csv")
View(df_monthly_index)
season=matrix(rep(c(1,0,0,0,0,0,0,0,0,0,0,0),12),byrow=T,nrow=129)
season=matrix(rep(c(0,0,0,0,0,0,0,0,0,1,0,0),12),byrow=T,nrow=129)
season=matrix(rep(c(1,0,0,0,0,0,0,0,0,0,0,0),12),byrow=T,nrow=132)
season=matrix(rep(c(1,0,0,0,0,0,0,0,0,0,0,0),12),byrow=T,nrow=144)
View(season)
season=matrix(rep(c(0,0,0,0,0,0,0,0,0,1,0,0),12),byrow=T,nrow=1548)
season=matrix(rep(c(0,0,0,0,0,0,0,0,0,1,0,0),12),byrow=T)
View(season)
#################################
#                               #
#       MSA Class of 2019       #
#                               #
#      Logistic Regression      #
#        Final Project          #
#        Orange Team 2          #
#                               #
#################################
#install.packages(c('expsmooth','lmtest','zoo','seasonal','haven','fma','gmodels','car','tseries','descr','forecast','brglm2','moments'))
library(car)
library(gmodels)
library(forecast)
library(haven)
library(fma)
library(descr)
library(expsmooth)
library(lmtest)
library(zoo)
library(seasonal)
library(brglm)
library(brglm2)
library(moments)
library(caret)
options(scipen=999) # Improve readability of parameter estimates
set.seed(1452) # Set seed to replicate results
file.dir <- '/Users/matttrombley/Dropbox/Fall 2018/Fall 1/Logistic Regression/Final Project/' # Replace with path to your file
input.file1 <- "construction.sas7bdat"
construction <- read_sas(paste(file.dir, input.file1,sep = "")) # Read in training set
construction$Won <- ifelse(construction$Win_Bid == "Yes",1,0)
sum(construction$Won)
87/543
file.dir <- '/Users/matttrombley/Dropbox/Fall 2018/Fall 1/Logistic Regression/Final Project/' # Replace with path to your file
input.file1 <- "construction.sas7bdat"
construction <- read_sas(paste(file.dir, input.file1,sep = "")) # Read in training set
construction$Bid_Win_Difference <- round(construction$Bid_Price__Millions_ - construction$Winning_Bid_Price__Millions_,2) # Creating this variable is one way to resolve all multicollinearity
construction$Won <- ifelse(construction$Win_Bid == "Yes",1,0)
construction$Sector <- as.factor(construction$Sector) # Change Sector to categorical variable
construction <- subset(construction, select = -c(Win_Bid,Competitor_C,Competitor_D,Competitor_G))
summary(construction) # Summarize to check for missing values and descriptive statistics
inTrain <- createDataPartition(y=construction$Won, p=0.70, list=FALSE) # Creating partitions randomly
construction_train <- construction[inTrain,]
construction_valid <- construction[-inTrain,]
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_E + Competitor_F + Competitor_H + Competitor_I + Competitor_J + Bid_Win_Difference + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1) # This new model with Bid_Win_Difference eliminates all multicollinearity present in the model
summary(construction_ref)
control1 <- glm.control1(maxit = 100) # Need to increase the maximum number of model iterations so that brglm can run successfully
construction_ref <- brglm(Won ~ Estimated_Cost__Millions_ + Estimated_Years_to_Complete + Region_of_Country + Number_of_Competitor_Bids + Competitor_A + Competitor_B + Competitor_E + Competitor_F + Competitor_H + Competitor_I + Competitor_J + Bid_Win_Difference + Cost_After_Engineering_Estimate_, data = construction_train, family = binomial(link = "logit"), control.glm = control1) # This new model with Bid_Win_Difference eliminates all multicollinearity present in the model
summary(construction_ref)
vif(construction_ref) # No more multicollinearity present
View(construction_train)
hist(construction$competitor_C) # Replace variable as needed to generate histograms
View(construction_valid)
View(construction)
hist(as.numeric(construction$competitor_C)) # Replace variable as needed to generate histograms
hist(as.numeric(construction$Competitor_C)) # Replace variable as needed to generate histograms
hist(construction$Competitor_C) # Replace variable as needed to generate histograms
library(haven)
library(forecast)
library(fma)
library(tseries)
library(expsmooth)
library(lmtest)
library(zoo)
library(ggplot2)
file.dir <- "/Users/matttrombley/Dropbox/Fall 2018/Fall 1/Time Series/Data/"
input.file1 <- "usa_tx_noaa.sas7bdat"
input.file2 <- "airline.sas7bdat"
#### Sine and Cosine in ARIMA
tx <- read_sas(paste(file.dir, input.file1, sep = ""))
airline <- read_sas(paste(file.dir, input.file2, sep = ""))
tx.ts<-ts(tx$Temperature,frequency = 12)
air.ts<-ts(airline$LogPsngr,frequency = 12)
index.ts=seq(1,length(tx.ts))
x1.sin=sin(2*pi*index.ts*1/12)
x1.cos=cos(2*pi*index.ts*1/12)
x2.sin=sin(2*pi*index.ts*2/12)
x2.cos=cos(2*pi*index.ts*2/12)
x3.sin=sin(2*pi*index.ts*3/12)
x3.cos=cos(2*pi*index.ts*3/12)
x4.sin=sin(2*pi*index.ts*4/12)
x4.cos=cos(2*pi*index.ts*4/12)
x.reg=cbind(x1.sin,x1.cos,x2.sin,x2.cos,x3.sin,x3.cos,x4.sin,x4.cos)
arima.1<-Arima(tx.ts,order=c(0,0,0),xreg=x.reg)
summary(arima.1)
arima.2<-Arima(tx.ts,order=c(0,0,0),xreg=fourier(tx.ts,K=4))
summary(arima.2)
###Creating an STL with multiple seasons
#Number of calls handled on weekdays between 7:00 am and 9:05 pm
# Five-minute call volume from March 3, 2003, to May 23, 2003
# in a large North American commercial bank.
calls <- unlist(read.csv("https://robjhyndman.com/data/callcenter.txt",
header=TRUE,sep="\t")[,-1])
calls <- msts(calls, start=1, seasonal.periods = c(169, 169*5))
calls %>% mstl() %>%
autoplot() + xlab("Week")
fit <- auto.arima(calls, seasonal=FALSE,
xreg=fourier(calls, K=c(10,10)))
summary(arima.1)
summary(arima.2)
calls <- unlist(read.csv("https://robjhyndman.com/data/callcenter.txt",
header=TRUE,sep="\t")[,-1])
calls <- msts(calls, start=1, seasonal.periods = c(169, 169*5))
calls %>% mstl() %>%
autoplot() + xlab("Week")
fit <- auto.arima(calls, seasonal=FALSE,
xreg=fourier(calls, K=c(10,10)))
library(plyr)
library(tidyverse)
library(xlsx)
library(zoo)
library(forecast)
library(imputeTS)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(seasonal)
library(tseries)
# Working directories and file paths - Matt
setwd("/Users/matttrombley/Desktop/Time Series II/Homework 4/")
well <- read.csv("G-1260_T_2.csv")
well <- read.csv("G-1260_T_2.csv")
well <- read.csv("G-1260_T_2.csv")
well1 <- ts(well$Corrected)
well1 <- ts(well$Corrected, frequency=24)
plot(stl(well1, s.window=5))
well1 <- ts(well$Corrected, frequency=8766)
plot(stl(well1, s.window=5))
well1 <- ts(well$Corrected, frequency=168)
plot(stl(well1, s.window=5))
well1 <- read.csv("G-2147_T.csv")
well1 <- read.csv("G-1260_T_2.csv")
well1_ts <- ts(well1$Corrected, frequency=168)
plot(stl(well1_ts, s.window=5))
well2 <- read.csv("G-2147_T.csv")
well2_ts <- ts(well2$Corrected, frequency=8766)
plot(stl(well2_ts, s.window=5))
well3 <- read.csv("G-561_T.csv")
well3_ts <- ts(well3$Corrected, frequency=168)
plot(stl(well3_ts, s.window=5))
well3_ts <- ts(well3$Corrected, frequency=8766)
plot(stl(well3_ts, s.window=5))
plot(stl(well3_ts, s.window=5)$3)
well3_ts <- ts(well3$Corrected, frequency=12)
plot(stl(well3_ts, s.window=5)$3)
well3_ts <- ts(well3$Corrected, frequency=12)
plot(stl(well3_ts, s.window=5))
well3_ts <- ts(well3$Corrected, frequency=24)
plot(stl(well3_ts, s.window=5))
well3_ts <- ts(well3$Corrected, frequency=168)
plot(stl(well3_ts, s.window=5))
well4 <- read.csv("G-2866_T.csv")
well4_ts <- ts(well4$Corrected, frequency=8766)
plot(stl(well4_ts, s.window=5))
well5 <- read.csv("G-3549.csv")
well5_ts <- ts(well5$Corrected, frequency=8766)
plot(stl(well5_ts, s.window=5))
library(plyr)
library(tidyverse)
#library(rJava)
library(xlsx)
library(zoo)
library(forecast)
library(imputeTS)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(seasonal)
library(tseries)
setwd("/Users/matttrombley/Documents/GitHub/Time-Series-2-/")
well <- read.csv("G-1260_T.csv")
# Working directories and file paths - Grant
setwd("C:\\Users\\Grant\\Downloads")
path <- "C:\\Users\\Grant\\Documents\\GitHub\\Time-Series-2-\\G-1260_T.csv"
well <- read_csv(path)
well <- well[1:112063,] # Remove values having code P
# Create a time element that is hourly to aggregate on
well$UTC_Hour <- as.character(well$UTC_Hour)
well$date_hour <- paste(paste(well$UTC_Date,substr(well$UTC_Hour,1,nchar(well$UTC_Hour)-3),sep=" "),":00",sep="")
# Aggregate the corrected well height data to hourly
well_agg <- aggregate(well$Corrected, list(well$date_hour), mean)
# Clean up formatting of dates, times, and row/column names
well_agg$Group.1 <- as.POSIXct(strptime(well_agg$Group.1, "%m/%d/%y %H:%M"), tz="UTC")
well_agg <- well_agg[order(well_agg$Group.1),]
rownames(well_agg) <- 1:nrow(well_agg)
colnames(well_agg) <- c("Date_Time", "Avg_Corrected_Well_Height")
# Check to see if there are missing values
x1 <- as.POSIXct('2007-10-01 05:00:00',tz='UTC')
x2 <- as.POSIXct('2018-06-08 00:00:00',tz='UTC')
full_date_time <- as.data.frame(seq(from=x1,to=x2,by="hour"))
nrow(full_date_time) - nrow(well_agg) # 497 entries missing
colnames(full_date_time) <- c("Date_Time")
ts = read_sas("casts.sas7bdat")
predicteds=as.data.frame(ts$FORECAST)
test=as.data.frame(ts$Avg_Corrected_Well_Height)
TSdata = as.data.frame(c(predicteds,test))
setnames(TSdata, old = c("ts.FORECAST","ts.Avg_Corrected_Well_Height"), new = c("Forecasted","Actual"))
library(ggplot2)
library(data.table)
library(reshape2)
setnames(TSdata, old = c("ts.FORECAST","ts.Avg_Corrected_Well_Height"), new = c("Forecasted","Actual"))
TSdata$Hours = seq(1:168)
Tsdata <- tail(Tsdata, 168)
TSdata = as.data.frame(c(predicteds,test))
setnames(TSdata, old = c("ts.FORECAST","ts.Avg_Corrected_Well_Height"), new = c("Forecasted","Actual"))
Tsdata <- tail(Tsdata, 168)
TSdata <- tail(Tsdata, 168)
TSdata <- tail(TSdata, 168)
TSdata$Hours = seq(1:168)
TSdata2 <- gather(TSdata,Pred_Actual,Value,Forecasted:Actual)
#Actual plot
t = ggplot(TSdata2, aes(Hours,Value,group = Pred_Actual, color = Pred_Actual )) +
#geom_point(size = 3) +
geom_line(size = 1.2)
t +  labs(title = "Forecasted vs Actual Values" ,x = "Hours", y = "Well Depth (feet)",
title = " ", color = " ") + theme(text = element_text(size=25))
error=ts$Avg_Corrected_Well_Height - mean(ts$FORECAST)
MAE=mean(abs(error))
MAPE=mean(abs(error)/abs(ts$Avg_Corrected_Well_Height))
MAE
MAPE
View(ts)
error=TSdata$Avg_Corrected_Well_Height - mean(TSdata$FORECAST)
View(TSdata)
error=TSdata$Avg_Corrected_Well_Height - mean(TSdata$Actual)
MAE=mean(abs(error))
MAPE=mean(abs(error)/abs(ts$Avg_Corrected_Well_Height))
MAE
MAPE
mean(TSdata$Actual)
error=TSdata$Forecasted - mean(TSdata$Actual)
MAE=mean(abs(error))
MAPE=mean(abs(error)/abs(ts$Avg_Corrected_Well_Height))
MAE
MAPE
well <- read.csv("G-1260_T.csv")
# Import and clean SAS forecast residuals
ts = read_sas("casts.sas7bdat")
View(ts)
predicteds=as.data.frame(ts$FORECAST)
test=as.data.frame(ts$Avg_Corrected_Well_Height)
TSdata = as.data.frame(c(predicteds,test))
setnames(TSdata, old = c("ts.FORECAST","ts.Avg_Corrected_Well_Height"), new = c("Forecasted","Actual"))
TSdata <- tail(TSdata, 168)
TSdata$Hours = seq(1:168)
TSdata2 <- gather(TSdata,Pred_Actual,Value,Forecasted:Actual)
View(TSdata2)
# Plot of the forecasted vs. actual values
t = ggplot(TSdata2, aes(Hours,Value,group = Pred_Actual, color = Pred_Actual )) +
#geom_point(size = 3) +
geom_line(size = 1.2)
t +  labs(title = "Forecasted vs Actual Values" ,x = "Hours", y = "Well Depth (feet)",
title = " ", color = " ") + theme(text = element_text(size=25))
# Calculation of relevant error metrics
error=TSdata$Forecasted - mean(TSdata$Actual)
# Calculation of relevant error metrics
TSdata$error=TSdata$Forecasted - TSdata$Actual
MAE=mean(abs(TSdata$error))
MAPE=100*mean(abs(TSdata$error)/abs(TSdata$Actual))
MAE
MAPE
